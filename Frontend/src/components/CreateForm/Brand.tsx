import { useState } from "react";
import { Form, Input, Upload, Button, Card, Typography, Spin } from "antd";
import { UploadOutlined, CheckCircleOutlined, LoadingOutlined } from "@ant-design/icons";
import axios from "axios";
import { motion } from "framer-motion";
import toast from "react-hot-toast";

const Brand = () => {
    const [form] = Form.useForm();
    const [preview, setPreview] = useState<string | null>(null);
    const [loading, setLoading] = useState(false);

    const handleSubmit = async (values: Record<string, any>) => {
        try {
            setLoading(true);
            const formData = new FormData();
            formData.append("brandName", values.brandName || "");
            const logoFile = values.logo?.[0]?.originFileObj;
            if (logoFile) {
                formData.append("file", logoFile);
            }

            const response = await axios.post("/api/brands/add", formData, {
                headers: { "Content-Type": "multipart/form-data",
                Authorization: `Bearer ${localStorage.getItem("token")}` }
            });

            toast.success(response.data?.message || "üéâ Th√™m m·ªõi th∆∞∆°ng hi·ªáu th√†nh c√¥ng!");
            setPreview(null);
            form.resetFields();
        } catch (error: any) {
            const errorMessage = error.response?.data?.message || "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra! H√£y th·ª≠ l·∫°i.";
            toast.error(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    const handlePreview = (file: any) => {
        const reader = new FileReader();
        reader.onload = () => {
            setPreview(reader.result as string);
        };
        reader.readAsDataURL(file);
        return false;
    };

    return (
        <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="max-w mx-auto"
        >
            <Card className="bg-white shadow-lg rounded-2xl p-6 border border-gray-200">
                <Typography.Title level={3} className="text-center text-gray-700">
                    üè∑Ô∏è Th√™m th∆∞∆°ng hi·ªáu m·ªõi
                </Typography.Title>

                <Form form={form} onFinish={handleSubmit} layout="vertical">
                    {/* Nh·∫≠p t√™n th∆∞∆°ng hi·ªáu */}
                    <Form.Item
                        name="brandName"
                        label={<span className="text-gray-600">T√™n th∆∞∆°ng hi·ªáu</span>}
                        rules={[
                            { required: true, message: "‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n th∆∞∆°ng hi·ªáu!" },
                            { min: 3, message: "‚ö†Ô∏è T√™n th∆∞∆°ng hi·ªáu ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±!" },
                            { max: 50, message: "‚ö†Ô∏è T√™n th∆∞∆°ng hi·ªáu kh√¥ng ƒë∆∞·ª£c qu√° 50 k√Ω t·ª±!" },
                            { pattern: /^[^\s]+(\s+[^\s]+)*$/, message: "‚ö†Ô∏è Kh√¥ng ƒë∆∞·ª£c nh·∫≠p to√†n kho·∫£ng tr·∫Øng!" },
                            { pattern: /^[a-zA-Z0-9\s√Ä-·ª∏√†-·ªπ]+$/, message: "‚ö†Ô∏è Kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát!" },
                            { pattern: /[a-zA-Z√Ä-·ª∏√†-·ªπ]/, message: "‚ö†Ô∏è T√™n th∆∞∆°ng hi·ªáu kh√¥ng ƒë∆∞·ª£c ch·ªâ g·ªìm s·ªë!" },
                        ]}
                    >
                        <Input placeholder="Nh·∫≠p t√™n th∆∞∆°ng hi·ªáu" className="rounded-lg" />
                    </Form.Item>

                    {/* T·∫£i l√™n logo */}
                    <Form.Item
                        name="logo"
                        label={<span className="text-gray-600">Logo th∆∞∆°ng hi·ªáu</span>}
                        valuePropName="fileList"
                        getValueFromEvent={(e) => e?.fileList || []}
                        rules={[
                            { required: true, message: "‚ö†Ô∏è Vui l√≤ng t·∫£i l√™n logo th∆∞∆°ng hi·ªáu!" },
                            ({ getFieldValue }) => ({
                                validator(_, fileList) {
                                    if (!fileList || fileList.length === 0) {
                                        return Promise.reject("‚ö†Ô∏è Vui l√≤ng t·∫£i l√™n logo!");
                                    }
                                    const file = fileList[0].originFileObj;
                                    const isImage = ["image/jpeg", "image/png", "image/jpg"].includes(file?.type);
                                    const isLt2M = file?.size / 1024 / 1024 < 2;

                                    if (!isImage) {
                                        return Promise.reject("‚ö†Ô∏è Ch·ªâ ch·∫•p nh·∫≠n file JPG, JPEG ho·∫∑c PNG!");
                                    }
                                    if (!isLt2M) {
                                        return Promise.reject("‚ö†Ô∏è K√≠ch th∆∞·ªõc ·∫£nh ph·∫£i nh·ªè h∆°n 2MB!");
                                    }
                                    return Promise.resolve();
                                },
                            }),
                        ]}
                    >
                        <Upload
                            beforeUpload={handlePreview}
                            maxCount={1}
                            listType="picture"
                            showUploadList={false}
                        >
                            <Button icon={<UploadOutlined />} className="rounded-lg">
                                Ch·ªçn t·ªáp ·∫£nh
                            </Button>
                        </Upload>
                    </Form.Item>

                    {/* Hi·ªÉn th·ªã ·∫£nh xem tr∆∞·ªõc */}
                    {preview && (
                        <div className="flex justify-center my-3">
                            <img
                                src={preview}
                                alt="Xem tr∆∞·ªõc logo"
                                className="w-32 h-32 object-cover rounded-lg shadow-lg border border-gray-300"
                            />
                        </div>
                    )}

                    {/* N√∫t Submit v·ªõi Loading */}
                    <Button
                        type="primary"
                        htmlType="submit"
                        icon={loading ? <LoadingOutlined /> : <CheckCircleOutlined />}
                        disabled={loading}
                        className="w-full bg-blue-600 hover:bg-blue-700 text-white rounded-lg flex items-center justify-center"
                    >
                        {loading ? <Spin size="small" /> : "Th√™m m·ªõi"}
                    </Button>
                </Form>
            </Card>
        </motion.div>
    );
};

export default Brand;
