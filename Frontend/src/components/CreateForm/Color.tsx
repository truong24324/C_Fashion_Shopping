import { useState } from "react";
import { Form, Input, Button, Card, Typography, Spin } from "antd";
import { SketchPicker } from "react-color";
import { CheckCircleOutlined, LoadingOutlined, BgColorsOutlined } from "@ant-design/icons";
import axios from "axios";
import { motion } from "framer-motion";
import toast from "react-hot-toast";

const Color = () => {
    const [form] = Form.useForm();
    const [loading, setLoading] = useState(false);
    const [color, setColor] = useState("#000000"); // M√†u m·∫∑c ƒë·ªãnh
    const [showPicker, setShowPicker] = useState(false);

    const handleSubmit = async (values: { colorName: string; colorCode: string }) => {
        try {
            setLoading(true);
            const response = await axios.post("/api/colors/add", values,
                {
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${localStorage.getItem("token")}`,
                    },
                }
            );
            toast.success(response.data?.message || "üé® Th√™m m√†u s·∫Øc th√†nh c√¥ng!");
            form.resetFields();
            setColor("#000000"); // Reset v·ªÅ m√†u ƒëen sau khi th√™m
        } catch (error: any) {
            const errorMessage = error.response?.data?.message || "‚ö†Ô∏è C√≥ l·ªói x·∫£y ra! H√£y th·ª≠ l·∫°i.";
            toast.error(errorMessage);
        } finally {
            setLoading(false);
        }
    };
    return (
        <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="max-w mx-auto"
        >
            <Card className="bg-white shadow-lg rounded-2xl p-6 border border-gray-200">
                <Typography.Title level={3} className="text-center text-gray-700">
                    üé® Th√™m m√†u s·∫Øc m·ªõi
                </Typography.Title>

                <Form form={form} onFinish={handleSubmit} layout="vertical">
                    {/* Nh·∫≠p t√™n m√†u */}
                    <Form.Item
                        name="colorName"
                        label={<span className="text-gray-600">T√™n m√†u</span>}
                        rules={[
                            { required: true, message: "‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n m√†u!" },
                            { min: 2, message: "‚ö†Ô∏è T√™n m√†u ph·∫£i c√≥ √≠t nh·∫•t 2 k√Ω t·ª±!" },
                            { max: 30, message: "‚ö†Ô∏è T√™n m√†u kh√¥ng ƒë∆∞·ª£c qu√° 30 k√Ω t·ª±!" },
                            { pattern: /^[^\s]+(\s+[^\s]+)*$/, message: "‚ö†Ô∏è Kh√¥ng ƒë∆∞·ª£c nh·∫≠p to√†n kho·∫£ng tr·∫Øng!" },
                            { pattern: /^[a-zA-Z0-9\s√Ä-·ª∏√†-·ªπ]+$/, message: "‚ö†Ô∏è Kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát!" },
                        ]}
                    >
                        <Input placeholder="Nh·∫≠p t√™n m√†u" className="rounded-lg" />
                    </Form.Item>

                    {/* Nh·∫≠p m√£ m√†u v·ªõi n√∫t m·ªü b·∫£ng ch·ªçn m√†u */}
                    <Form.Item
                        name="colorCode"
                        label={<span className="text-gray-600">M√£ m√†u (HEX)</span>}
                        rules={[
                            { required: true, message: "‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ m√†u!" },
                            { pattern: /^#([0-9A-Fa-f]{3}){1,2}$/, message: "‚ö†Ô∏è M√£ m√†u kh√¥ng h·ª£p l·ªá! VD: #FF5733" },
                        ]}
                    >
                        <div className="flex items-center space-x-2">
                            {/* √î hi·ªÉn th·ªã m√†u */}
                            <div
                                className="w-10 h-10 rounded border border-gray-400"
                                style={{ backgroundColor: color }}
                            />
                            {/* √î nh·∫≠p m√£ m√†u */}
                            <Input
                                placeholder="VD: #FF5733"
                                className="rounded-lg"
                                value={color}
                                onChange={(e) => setColor(e.target.value)}
                            />
                            {/* N√∫t m·ªü b·∫£ng ch·ªçn m√†u */}
                            <Button
                                icon={<BgColorsOutlined />}
                                onClick={() => setShowPicker(!showPicker)}
                                className="border border-gray-400 hover:border-blue-500"
                            />
                        </div>
                    </Form.Item>

                    {/* Hi·ªÉn th·ªã b·∫£ng ch·ªçn m√†u khi ng∆∞·ªùi d√πng b·∫•m n√∫t */}
                    {showPicker && (
                        <div className="absolute z-10 mt-2 shadow-lg border rounded-lg">
                            <SketchPicker
                                color={color}
                                onChange={(updatedColor: { hex: string }) => {
                                    setColor(updatedColor.hex);
                                    form.setFieldsValue({ colorCode: updatedColor.hex });
                                }}
                                styles={{
                                    default: {
                                        picker: {
                                            position: "absolute",
                                            top: "-250px", // ƒê·∫©y b·∫£ng m√†u l√™n tr√™n
                                            left: "500",
                                            zIndex: 1000, // ƒê·∫£m b·∫£o b·∫£ng m√†u hi·ªÉn th·ªã tr√™n c√°c ph·∫ßn t·ª≠ kh√°c
                                        },
                                    },
                                }}
                            />
                        </div>
                    )}

                    {/* N√∫t Submit v·ªõi hi·ªáu ·ª©ng Loading */}
                    <Button
                        type="primary"
                        htmlType="submit"
                        icon={loading ? <LoadingOutlined /> : <CheckCircleOutlined />}
                        disabled={loading}
                        className="w-full bg-blue-600 hover:bg-blue-700 text-white rounded-lg flex items-center justify-center"
                    >
                        {loading ? <Spin size="small" /> : "Th√™m m√†u"}
                    </Button>
                </Form>
            </Card>
        </motion.div>
    );
};

export default Color;
