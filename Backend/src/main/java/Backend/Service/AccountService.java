package Backend.Service;

import java.util.Date;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import Backend.Model.Account;
import Backend.Model.Role;
import Backend.Repository.AccountRepository;
import Backend.Request.RegisterRequest;
import jakarta.transaction.Transactional;

@Service
@Profile("user")
public class AccountService {

    @Autowired
    private AccountRepository accountRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    private static final int MAX_FAILED_ATTEMPTS = 5;
    private static final long LOCK_TIME_DURATION = 30 * 60 * 1000; // 30 ph√∫t

    // üîπ T√¨m t√†i kho·∫£n theo email
    public Optional<Account> findByEmail(String email) {
        return accountRepository.findByEmail(email);
    }

    // üîπ Ki·ªÉm tra t√†i kho·∫£n b·ªã kh√≥a
    public boolean isAccountLocked(Account account) {
        return account.isLocked() && account.getLockUntil() != null && account.getLockUntil().after(new Date());
    }

    // üîπ C·∫≠p nh·∫≠t tr·∫°ng th√°i kh√≥a t√†i kho·∫£n
    @Transactional
    public void lockAccount(Account account) {
        account.setLocked(true);
        account.setLockUntil(new Date(System.currentTimeMillis() + LOCK_TIME_DURATION));
        accountRepository.save(account);
    }

    // üîπ Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p v√† x·ª≠ l√Ω th·∫•t b·∫°i
    @Transactional
    public String validateLogin(Account account, String password) {
        if (!passwordEncoder.matches(password, account.getPassword())) {
            int failedAttempts = account.getFailedLoginAttempts() + 1;
            account.setFailedLoginAttempts(failedAttempts);

            if (failedAttempts >= MAX_FAILED_ATTEMPTS) {
                lockAccount(account);
                return "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a. Vui l√≤ng th·ª≠ l·∫°i sau!";
            }

            accountRepository.save(account);
            return "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. B·∫°n c√≤n " + (MAX_FAILED_ATTEMPTS - failedAttempts) + " l·∫ßn th·ª≠.";
        }

        // ƒêƒÉng nh·∫≠p th√†nh c√¥ng -> Reset s·ªë l·∫ßn th·∫•t b·∫°i
        account.setFailedLoginAttempts(0);
        account.setLocked(false);
        account.setLockUntil(null);
        account.setLoginTime(new Date());

        accountRepository.save(account);
        return null; // Kh√¥ng c√≥ l·ªói
    }

    // üîπ Ki·ªÉm tra t·ªìn t·∫°i email, phone, userCode
    public boolean existsByEmail(String email) {
        return accountRepository.existsByEmail(email);
    }

    public boolean existsByPhone(String phone) {
        return accountRepository.existsByPhone(phone);
    }

    public boolean existsByUserCode(String userCode) {
        return accountRepository.existsByUserCode(userCode);
    }

    // üîπ ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi
    @Transactional
    public Account registerNewAccount(RegisterRequest request, Role defaultRole) {
        String encodedPassword = passwordEncoder.encode(request.getPassword());

        Account account = new Account();
        account.setEmail(request.getEmail());
        account.setPhone(request.getPhone());
        account.setUserCode(request.getUserCode());
        account.setActive(true);
        account.setPassword(encodedPassword);
        account.setCreatedAt(new Date());
        account.setUpdatedAt(new Date());
        account.setRole(defaultRole);

        return accountRepository.save(account);
    }

    @Transactional
    public Account save(Account account) {
        return accountRepository.save(account);
    }

    public long countAccounts() {
        return accountRepository.count();
    }

}
