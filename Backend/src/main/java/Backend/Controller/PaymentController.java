package Backend.Controller;

import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.util.*;

import javax.imageio.ImageIO;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.QRCodeWriter;

import Backend.Mailer.SendEmail;
import Backend.Model.Order;
import Backend.Model.OrderDetail;
import Backend.Model.OrderStatus;
import Backend.Model.Variant;
import Backend.Repository.OrderDetailRepository;
import Backend.Repository.OrderRepository;
import Backend.Repository.OrderStatusRepository;
import Backend.Repository.VariantRepository;
import Backend.Request.OrderRequest;
import Backend.Response.ApiResponse;
import Backend.Response.OrderResponse;
import Backend.Response.PaymentResponse;
import Backend.Service.MoMoService;
import Backend.Service.OrderService;
import Backend.Service.VNPayService;
import Backend.Service.VietQRService;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.transaction.Transactional;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/payment")
@PreAuthorize("hasAnyAuthority('ROLE_Customer')")
@RequiredArgsConstructor
public class PaymentController {

	private final VNPayService vnPayService;
	private final MoMoService momoService;
	private final SendEmail sendEmail;
	private final OrderService orderService;
	private final OrderRepository orderRepository;
	private final OrderDetailRepository orderDetailRepository;
	private final OrderStatusRepository orderStatusRepository;
	private final VariantRepository variantRepository;
	private final VietQRService vietQRService;

	@Value("${payment.momo.secretKey}")
	private String secretKey;
	
	@PostMapping("/create/vnpay")
	public ResponseEntity<PaymentResponse> createVnpayPayment(@RequestParam long amount,
			@RequestParam(required = false) String bankCode, @RequestBody OrderRequest order,
			HttpServletRequest request) {
		PaymentResponse res = vnPayService.createPaymentUrl(amount, bankCode, request, order);
		return ResponseEntity.ok(res);
	}

	@GetMapping("/vn-pay-return")
	public ResponseEntity<String> vnPayReturn(HttpServletRequest request) {
		vnPayService.handlePaymentReturn(request);
		return ResponseEntity.ok("C·∫£m ∆°n b·∫°n ƒë√£ thanh to√°n!");
	}

	@PostMapping("/create/momo")
	public ResponseEntity<?> createMomoPayment(@RequestBody OrderRequest orderRequestDto) {
		try {
			PaymentResponse response = momoService.createMomoPayment(orderRequestDto);

			return ResponseEntity.ok(response);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(500).body("L·ªói khi t·∫°o thanh to√°n MoMo");
		}
	}

	@PostMapping("/momo/verify")
	@Transactional
	public ResponseEntity<String> handleMomoIpn(@RequestBody Map<String, Object> payload) {
		try {
			// √âp ki·ªÉu sang String
			Map<String, String> params = new HashMap<>();
			for (Map.Entry<String, Object> entry : payload.entrySet()) {
				params.put(entry.getKey(), String.valueOf(entry.getValue()));
			}

			// 1Ô∏è‚É£ X√°c minh ch·ªØ k√Ω
			String signature = params.get("signature");
			String rawData = momoService.buildRawData(params); // T·∫°o rawData t·ª´ c√°c tr∆∞·ªùng c·∫ßn thi·∫øt
			String generatedSignature = momoService.hmacSHA256(rawData, secretKey);

			if (!generatedSignature.equals(signature)) {
				return ResponseEntity.badRequest().body("‚ùå Sai ch·ªØ k√Ω!");
			}

			// 2Ô∏è‚É£ X√°c minh k·∫øt qu·∫£
			String resultCode = params.get("resultCode");
			if (!"0".equals(resultCode)) {
				return ResponseEntity.ok("üîÅ MoMo b√°o thanh to√°n th·∫•t b·∫°i");
			}

			// 3Ô∏è‚É£ T√¨m ƒë∆°n h√†ng
			String orderId = params.get("orderId");
			Order order = orderRepository.findByOrderCode(orderId)
					.orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng: " + orderId));

			if ("ƒê√£ thanh to√°n".equals(order.getPaymentStatus())) {
				return ResponseEntity.ok("‚úÖ ƒê∆°n ƒë√£ x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥");
			}

			// 4Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i
			order.setPaymentStatus("ƒê√£ thanh to√°n");

			OrderStatus processingStatus = orderStatusRepository.findByStepOrder(2)
					.orElseThrow(() -> new RuntimeException("‚ùå Kh√¥ng t√¨m th·∫•y tr·∫°ng th√°i x·ª≠ l√Ω"));

			order.setOrderStatus(processingStatus);

			// 5Ô∏è‚É£ Gi·∫£m t·ªìn kho
			List<OrderDetail> details = orderDetailRepository.findByOrder(order);
			for (OrderDetail detail : details) {
				Variant variant = detail.getVariant();
				if (variant.getStock() < detail.getQuantity()) {
					throw new RuntimeException("‚ùå S·∫£n ph·∫©m " + variant.getVariantId() + " kh√¥ng ƒë·ªß t·ªìn kho");
				}
				variant.setStock(variant.getStock() - detail.getQuantity());
				variantRepository.save(variant);
			}

			orderRepository.save(order);
			return ResponseEntity.ok("‚úÖ Thanh to√°n th√†nh c√¥ng");

		} catch (Exception e) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body("‚ùå L·ªói x·ª≠ l√Ω IPN: " + e.getMessage());
		}
	}

	@PostMapping("/create/COD")
	public ResponseEntity<?> createOrder(@Valid @RequestBody OrderRequest orderRequest) {
		List<String> missingFields = new ArrayList<>();

		if (orderRequest.getOrderStatusId() == null) {
			missingFields.add("orderStatusId");
		}
		if (orderRequest.getAccountId() == null) {
			missingFields.add("accountId");
		}
		if (orderRequest.getOrderDetails() == null) {
			missingFields.add("orderDetails");
		}

		if (!missingFields.isEmpty()) {
			String errorMessage = "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá. Thi·∫øu: " + String.join(", ", missingFields);
			return ResponseEntity.badRequest().body(new ApiResponse<>(false, errorMessage, null));
		}

		try {
			Order createdOrder = orderService.placeOrder(orderRequest);
			OrderResponse orderResponse = orderService.convertToResponse(createdOrder);
			sendEmail.sendOrderConfirmationEmail(createdOrder.getEmail(), createdOrder);
			return ResponseEntity.ok(new ApiResponse<>(true, "ƒê·∫∑t h√†ng th√†nh c√¥ng", orderResponse));
		} catch (IllegalArgumentException e) {
			return ResponseEntity.badRequest().body(new ApiResponse<>(false, e.getMessage(), null));
		} catch (Exception e) {
			return ResponseEntity.status(500)
					.body(new ApiResponse<>(false, "L·ªói h·ªá th·ªëng khi t·∫°o ƒë∆°n h√†ng: " + e.getMessage(), null));
		}
	}

	@PostMapping("/create/VietQR")
	public ResponseEntity<?> createOrderWithVietQR(@Valid @RequestBody OrderRequest orderRequest) {
		List<String> missingFields = new ArrayList<>();

		if (orderRequest.getOrderStatusId() == null) {
			missingFields.add("orderStatusId");
		}
		if (orderRequest.getAccountId() == null) {
			missingFields.add("accountId");
		}
		if (orderRequest.getOrderDetails() == null) {
			missingFields.add("orderDetails");
		}

		if (!missingFields.isEmpty()) {
			String errorMessage = "D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá. Thi·∫øu: " + String.join(", ", missingFields);
			return ResponseEntity.badRequest().body(new ApiResponse<>(false, errorMessage, null));
		}

		try {
			// 1. T·∫°o ƒë∆°n h√†ng nh∆∞ b√¨nh th∆∞·ªùng (ch∆∞a thanh to√°n)
			orderRequest.setPaymentMethod("VietQR");
			orderRequest.setPaymentStatus("Ch∆∞a thanh to√°n");
			Order createdOrder = orderService.placeOrder(orderRequest);

			// 2. T·∫°o m√£ QR VietQR
			String bankCode = "vpbank"; // B·∫°n c√≥ th·ªÉ cho ph√©p ng∆∞·ªùi d√πng ch·ªçn ng√¢n h√†ng
			String accountNumber = "624032004"; // S·ªë t√†i kho·∫£n nh·∫≠n ti·ªÅn
			String message = "Thanh toan don " + createdOrder.getOrderCode();
			String qrString = vietQRService.generateQR(bankCode, accountNumber, createdOrder.getTotalAmount(), message,
					createdOrder.getOrderCode());

			// 3. Convert QR string to base64 image (n·∫øu mu·ªën tr·∫£ ·∫£nh)
			ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
			QRCodeWriter writer = new QRCodeWriter();
			BitMatrix bitMatrix = writer.encode(qrString, BarcodeFormat.QR_CODE, 400, 400);
			BufferedImage qrImage = new BufferedImage(400, 400, BufferedImage.TYPE_INT_RGB);
			for (int x = 0; x < 400; x++) {
				for (int y = 0; y < 400; y++) {
					qrImage.setRGB(x, y, bitMatrix.get(x, y) ? 0xFF000000 : 0xFFFFFFFF);
				}
			}
			ImageIO.write(qrImage, "png", outputStream);
			String base64Qr = Base64.getEncoder().encodeToString(outputStream.toByteArray());

			// 4. Tr·∫£ k·∫øt qu·∫£
			Map<String, Object> responseData = new HashMap<>();
			responseData.put("order", orderService.convertToResponse(createdOrder));
			responseData.put("qrData", qrString);
			responseData.put("qrBase64Image", "data:image/png;base64," + base64Qr);

			sendEmail.sendOrderConfirmationEmail(orderService.convertToResponse(createdOrder).getEmail(), createdOrder);
			return ResponseEntity.ok(new ApiResponse<>(true, "T·∫°o ƒë∆°n h√†ng VietQR th√†nh c√¥ng", responseData));
		} catch (IllegalArgumentException e) {
			return ResponseEntity.badRequest().body(new ApiResponse<>(false, e.getMessage(), null));
		} catch (Exception e) {
			return ResponseEntity.status(500).body(new ApiResponse<>(false, "L·ªói h·ªá th·ªëng: " + e.getMessage(), null));
		}
	}

}