package Backend.Controller;

import java.util.Map;
import java.util.Optional;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import Backend.Model.Order;
import Backend.Model.OrderDetail;
import Backend.Model.OrderStatus;
import Backend.Repository.OrderRepository;
import Backend.Repository.OrderStatusRepository;
import Backend.Request.OrderRequest;
import Backend.Response.PaymentResponse;
import Backend.Service.EmailService;
import Backend.Service.MoMoService;
import Backend.Service.VNPayService;
import jakarta.servlet.http.HttpServletRequest;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/api/payment")
@RequiredArgsConstructor
public class PaymentController {

    private final VNPayService vnPayService;
    private final MoMoService momoService;
    private final OrderRepository orderRepository;
    private final OrderStatusRepository orderStatusRepository;
    private final EmailService emailService;

    @PostMapping("/create/vnpay")
    public ResponseEntity<PaymentResponse> createVnpayPayment(@RequestParam long amount,
                                                              @RequestParam(required = false) String bankCode,
                                                              @RequestBody OrderRequest order,
                                                              HttpServletRequest request) {
        PaymentResponse res = vnPayService.createPaymentUrl(amount, bankCode, request, order);
        return ResponseEntity.ok(res);
    }

    @GetMapping("/vn-pay-return")
    public ResponseEntity<String> vnPayReturn(HttpServletRequest request) {
        vnPayService.handlePaymentReturn(request);
        return ResponseEntity.ok("C·∫£m ∆°n b·∫°n ƒë√£ thanh to√°n!");
    }
    
    @PostMapping("/create/momo")
	public ResponseEntity<?> createMomoPayment(@RequestBody OrderRequest orderRequestDto) {
		try {
			PaymentResponse response = momoService.createMomoPayment(orderRequestDto);

			return ResponseEntity.ok(response);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(500).body("L·ªói khi t·∫°o thanh to√°n MoMo");
		}
	}

	@PostMapping("/ipn-handler")
	public ResponseEntity<String> handleMomoCallback(@RequestBody Map<String, String> momoResponse) {
	    try {
	        System.out.println("üì© ƒê√£ nh·∫≠n IPN t·ª´ MoMo: " + momoResponse); // In to√†n b·ªô JSON

	        String resultCode = momoResponse.get("resultCode");
	        String orderId = momoResponse.get("orderId");

	        Optional<Order> optionalOrder = orderRepository.findByOrderCode(orderId);
	        if (optionalOrder.isEmpty()) {
	            return ResponseEntity.badRequest().body("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£: " + orderId);
	        }

	        Order order = optionalOrder.get();
	        System.out.println("‚úÖ ƒê√£ t√¨m th·∫•y ƒë∆°n h√†ng. Tr·∫°ng th√°i hi·ªán t·∫°i: " + order.getOrderStatus().getStatusName());

	        // L·∫•y status id hi·ªán t·∫°i
	        Integer currentStatusId = order.getOrderStatus().getStatusId();

	        // X·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n
	        if ("0".equals(resultCode)) {
	            if (!currentStatusId.equals(1)) {
	                OrderStatus paidStatus = orderStatusRepository.findById(1)
	                        .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y tr·∫°ng th√°i PAID"));

	                order.setOrderStatus(paidStatus);
	                orderRepository.save(order);

	                System.out.println("üéâ Thanh to√°n th√†nh c√¥ng. ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng.");
	            }

	            sendOrderConfirmationEmail(order.getAccount().getEmail(), order);
	            return ResponseEntity.ok("Payment success");
	        } else {
	            if (!currentStatusId.equals(1)) {
	                OrderStatus pendingStatus = orderStatusRepository.findById(0)
	                        .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y tr·∫°ng th√°i PENDING"));

	                order.setOrderStatus(pendingStatus);
	                orderRepository.save(order);

	                System.out.println("üîÑ ƒê·∫∑t l·∫°i tr·∫°ng th√°i ƒë∆°n h√†ng v·ªÅ CH·ªú (PENDING)");
	            }
	            return ResponseEntity.status(400).body("Payment failed");
	        }

	    } catch (Exception e) {
	        e.printStackTrace();
	        return ResponseEntity.status(500).body("L·ªói x·ª≠ l√Ω IPN MoMo");
	    }
	}

	private void sendOrderConfirmationEmail(String toEmail, Order order) {
		String subject = "X√°c nh·∫≠n ƒë∆°n h√†ng #" + order.getOrderId();
		StringBuilder body = new StringBuilder();

		body.append("<h2>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng!</h2>");
		body.append("<p>ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v·ªõi th√¥ng tin sau:</p>");
		body.append("<ul>");
		body.append("<li><strong>M√£ ƒë∆°n h√†ng:</strong> " + order.getOrderId() + "</li>");
		body.append("<li><strong>ƒê·ªãa ch·ªâ:</strong> " + order.getShippingAddress() + "</li>");
		body.append("<li><strong>T·ªïng ti·ªÅn:</strong> " + order.getTotalAmount() + " VND</li>");
		body.append("<li><strong>Ph√≠ v·∫≠n chuy·ªÉn:</strong> " + order.getShippingFee() + " VND</li>");
		body.append("</ul>");
		body.append("<h3>Chi ti·∫øt s·∫£n ph·∫©m:</h3>");
		body.append("<ul>");

		for (OrderDetail orderDetail : order.getOrderDetails()) {
			body.append("<li>").append(orderDetail.getVariant().getProduct().getProductName()).append(" - S·ªë l∆∞·ª£ng: ")
					.append(orderDetail.getQuantity()).append(" - M√†u s·∫Øc: ")
					.append(orderDetail.getVariant().getColor());
		}
		body.append("</ul>");
		body.append("<p><strong>Ch√∫ng t√¥i s·∫Ω li√™n h·ªá v·ªõi b·∫°n s·ªõm nh·∫•t c√≥ th·ªÉ.</strong></p>");

		emailService.sendOrderConfirmation(toEmail, subject, body.toString());
	}
}
